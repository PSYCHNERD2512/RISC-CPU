library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

entity cpu is
	port (clk, rst: in std_logic; final_out: out std_logic_vector(15 downto 0));
end entity cpu;

architecture main of cpu is

	

	--No component for left shift. Do it on the go
	
	type FSMState is (S1, S2, S3, S4, S5, S6, S7, S8, S9, S10, S11, S12, S13, S14, S15, S16, 
		S17, S18, S19, S20);
	signal fsm_state: FSMState;
	signal instr_reg, instr_pointer: std_logic_vector(15 downto 0);
	signal mem_A, mem_Din, MEM_DOUT, ALU_A, ALU_B, ALU_O, RF_D1, RF_D2, RF_D3, SIGN_EXTENDER_10_OUTPUT, SIGN_EXTENDER_7_OUTPUT : std_logic_vector(15 downto 0);
	signal MEM_WRITE_BAR_ENABLE, ALU_C, ALU_Z, ALU_X, C_FLAG, Z_FLAG, RF_WRITE_IN : std_logic;
	signal RF_A1, RF_A2, RF_A3 : std_logic_vector(2 downto 0);
	signal T1, T2, T3, T4, T5 : std_logic_vector(15 downto 0);
	signal ALU_CONTROL : std_logic_vector(1 downto 0);
	signal SIGN_EXTERNDER_10_INPUT : std_logic_vector(5 downto 0);
	signal SIGN_EXTERNDER_7_INPUT : std_logic_vector(8 downto 0);

	
	begin

		Memory : memory_unit port map (
			mem_A, mem_Din, clk, MEM_WRITE_BAR_ENABLE, MEM_DOUT
		);
		
		Arithmetic_Logical_Unit : alu port map (
			ALU_A, ALU_B, ALU_CONTROL, ALU_C, ALU_Z, ALU_X, ALU_O
		);

		Register_file : rf_file port map (
			RF_A1, RF_A2, RF_A3, RF_D3, RF_D1, RF_D2, RF_WRITE_IN, clk
		);

		SE10 : sign_extend_10 port map (
			SIGN_EXTERNDER_10_INPUT, SIGN_EXTENDER_10_OUTPUT
		);

		SE7 : sign_extend_7 port map (
			SIGN_EXTERNDER_7_INPUT, SIGN_EXTENDER_7_OUTPUT
		);

		-- ALU_CONTROL "00" Adder, "01" NAND of all, "10" XOR
		-- 

		process(clk, fsm_state)

		variable next_fsm_state_var : FSMState;
		--variable RF_WRITE_IN_var : std_logic;
		--next_fsm_state_var := fsm_state;
		variable next_IP, temp_T1, temp_T2, temp_T3, temp_T4, temp_T5, instr_reg_var : std_logic_vector(15 downto 0);
		--next_IP := instr_pointer;

		begin
		
		next_fsm_state_var :=  fsm_state;
		next_IP := instr_pointer;
		temp_T4 := T4;
		temp_T1 := T1;
		temp_T2 := T2;
		temp_T3 := T3;
		temp_T5 := T5;
		instr_reg_var := instr_reg;

		--MEM_WRITE_BAR_ENABLE_var := MEM_WRITE_BAR_ENABLE;
		--RF_WRITE_IN_var := RF_WRITE_IN;

		case( fsm_state ) is
			
				when S1 =>
					MEM_WRITE_BAR_ENABLE<='1';
					RF_WRITE_IN <= '0';
					MEM_A <= instr_pointer;
					instr_reg_var := MEM_DOUT;
					case (instr_reg(15 downto 12)) is
						when "0001" =>
							next_fsm_state_var := S5;
						when "0000" |"0010" | "0011" | "0100" | "0101" | "0110" | "1011" | "1100"  =>
							next_fsm_state_var := S2;
						when "1010" =>
							next_fsm_state_var := S8;
						when "1111" | "1101" =>
							next_fsm_state_var := S14;
						when "1000" =>
							next_fsm_state_var := S18;
						when "1001" =>
							next_fsm_state_var := S20;
						when others =>
							null;
					end case;
				
				when S2 =>
					MEM_WRITE_BAR_ENABLE<='1';
					RF_WRITE_IN <= '0';
					RF_A1 <= instr_reg(11 downto 9);
					RF_A2 <= instr_reg(8 downto 6);
					temp_T1:=RF_D1; temp_T2:=RF_D2;
					
					case (instr_reg(15 downto 12)) is
						when "0000" |"0010" | "0011" | "0100" | "0101" | "0110" =>
							next_fsm_state_var := S3;
						when "1011" =>
							next_fsm_state_var := S6;
						when "1111" =>
							next_fsm_state_var := S15;
						when "1100" =>
							next_fsm_state_var := S12;
						when others =>
							null;
					end case;

				when S3 =>
					MEM_WRITE_BAR_ENABLE<='1';
					ALU_A <= T1; ALU_B <= T2;
					ALU_CONTROL <= "00";
					RF_WRITE_IN <= '1';
					
					--if (instr_reg(1 downto 0)="00") then
					--	TC_TEMP :=ALU_C; TZ_TEMP := ALU_Z;
					--elsif (instr_reg(1 downto 0)="10") then
					--	if (C_FLAG='1') then
					--		TC_TEMP :=ALU_C; TZ_TEMP := ALU_Z;
					--	else
					--		TC_TEMP :=C_FLAG; TZ_TEMP := Z_FLAG;
					--	end if;
					--elsif (instr_reg(1 downto 0)="01") then
					--	if (Z_FLAG='1') then
					--		TC_TEMP :=ALU_C; TZ_TEMP := ALU_Z;
					--	else
					--		TC_TEMP :=C_FLAG; TZ_TEMP := Z_FLAG;
					--	end if;
					--end if;
					--if (instr_reg(1 downto 0)="00") then =>
					temp_T3 := ALU_O;
					--elsif (instr_reg(1 downto 0) = "10" and C_FLAG='1') then
					--	T1 <= ALU_O; C_FLAG <=ALU_C; Z_FLAG <= ALU_Z;
					--elsif (instr_reg(1 downto 0)="01" and Z_FLAG='1') then
					--	T1 <= ALU_O; C_FLAG <=ALU_C; Z_FLAG <= ALU_Z;
					--end if;

					case (instr_reg(15 downto 12)) is
						when "0000" |"0010" | "0011" | "0100" | "0101" | "0110" =>
							next_fsm_state_var := S4;
						when others =>
							null;
					end case;

				when S4 =>
					MEM_WRITE_BAR_ENABLE<='1';

					
					

					end if;
					--RF_WRITE_IN <= '0';
					--RF_D3<=T1; instr_reg(5 downto 3)<=RF_A3;
					next_fsm_state_var := S1;

				when S5 =>
					RF_WRITE_IN <= '0';
					MEM_WRITE_BAR_ENABLE<='1';
					RF_A1 <= instr_reg(11 downto 9); temp_T1 := RF_D1;
					SIGN_EXTERNDER_10_INPUT<= instr_reg(5 downto 0);
					temp_T2 := SIGN_EXTENDER_10_OUTPUT;

					next_fsm_state_var := S6;

				when S6 =>
					MEM_WRITE_BAR_ENABLE<='1';
					RF_WRITE_IN <= '1';
					RF_D3 <= T3; RF_A3<=instr_reg(8 downto 6);
					TZ_TEMP := ALU_Z; TC_TEMP := ALU_C;
					case (instr_reg(15 downto 12)) is
						when "0001" =>
							next_fsm_state_var := S7;
						when "1010" =>
						 next_fsm_state_var := S9;
						when "1011" =>
						 next_fsm_state_var := S11;
						when others =>
						 null;
				
				when S7 =>
					RF_WRITE_IN <= '0';
					MEM_WRITE_BAR_ENABLE<='1';
					ALU_A <= T1; ALU_B <= T2;
					ALU_CONTROL <= "01";
					temp_T3:=ALU_O;

					next_fsm_state_var:= S1;

				when S8 =>
					RF_WRITE_IN <= '0';
					MEM_WRITE_BAR_ENABLE<='1';
					ALU_A <= instr_pointer;
					ALU_B <= x"0001";
					ALU_CONTROL<="00";
					next_IP := ALU_O;

					next_fsm_state_var := S6;

				when S9 =>
					RF_WRITE_IN <= '0';
					MEM_WRITE_BAR_ENABLE<='1';
					temp_T1(15 downto 7) := instr_reg(8 downto 0);
					temp_T1(6 downto 0) := "0000000";

					next_fsm_state_var:=S10;

				when S10 =>
					MEM_WRITE_BAR_ENABLE<='1';
					RF_WRITE_IN <= '1';
					RF_D3<=T1;
					RF_A3<=instr_reg(11 downto 9);
					--RF_WRITE_IN_var := '0';

					next_fsm_state_var := S1;

				when S11 =>
					RF_WRITE_IN <= '0';
					MEM_WRITE_BAR_ENABLE<='1';
					ALU_A<=T2;
					SIGN_EXTERNDER_10_INPUT<= instr_reg(5 downto 0);
					ALU_B <= SIGN_EXTENDER_10_OUTPUT;
					ALU_CONTROL<="00";
					temp_T1:= ALU_O;
					TZ_TEMP:=ALU_Z;

					next_fsm_state_var := S1;

				when S12 =>
					RF_WRITE_IN <= '0';
					MEM_WRITE_BAR_ENABLE<='1';
					--MEM_WRITE_BAR_ENABLE <= '0';
					MEM_A <= T1;
					temp_T2 := MEM_DOUT;
              if Z = 0 then
					next_fsm_state_var:= S1;
				  else 
				   next_fsm_state_var:= S13;
				  end if;

				when S13 =>
					MEM_WRITE_BAR_ENABLE<='1';
					RF_WRITE_IN <= '1';
					RF_D3<=T2;
					RF_A3<=instr_reg(11 downto 9);
					--RF_WRITE_IN_var := '0';

					next_fsm_state_var := S14;

				when S14 =>
					RF_WRITE_IN <= '0';
					MEM_WRITE_BAR_ENABLE<='1';
					ALU_A<=T2;
					SIGN_EXTERNDER_10_INPUT<=instr_reg(5 downto 0);
					ALU_B <= SIGN_EXTENDER_10_OUTPUT;
					ALU_CONTROL<="00";
					temp_T3:=ALU_O;
					
					case (instr_reg(15 downto 12)) is
						when "1101" =>
						 next_fsm_state_var := S15;
						when "1111" =>
						 next_fsm_state_var := S2;
						when others =>
						 null;

				when S15 =>
					RF_WRITE_IN <= '0';
					MEM_WRITE_BAR_ENABLE<='0';
					MEM_A <= T3;
					MEM_DIN <= T1;
					--MEM_WRITE_BAR_ENABLE_var := '1';
					case (instr_reg(15 downto 12)) is
						when "1101" =>
						 next_fsm_state_var := S17;
						when "1111" =>
						 next_fsm_state_var := S16;
						when others =>
						 null;

				when S16 =>
					RF_WRITE_IN <= '0';
					MEM_WRITE_BAR_ENABLE<='1';
					RF_A1<=instr_reg(11 downto 9);
					temp_T1 := RF_D1;
					temp_T2 := x"0000";

					next_fsm_state_var := S1;

				when S17 =>
					RF_WRITE_IN <= '0';
					MEM_WRITE_BAR_ENABLE<='1';
					ALU_A <= T1;
					ALU_B <= T2;
					ALU_CONTROL <= "00";
					temp_T3 := ALU_O;

					
					next_fsm_state_var:=S1;

				when S18 =>
					RF_WRITE_IN <= '0';
					MEM_WRITE_BAR_ENABLE<='1';
					MEM_A <= T3;
					temp_T4 := MEM_DOUT;

					next_fsm_state_var := S19;

				when S19 =>
					--temp_T3 := T3;
					MEM_WRITE_BAR_ENABLE<='1';
					RF_WRITE_IN <= '1';
					RF_A3 <= T2(2 downto 0);
					RF_D3 <= T4;
					temp_T5 := T2;
					--RF_WRITE_IN_var := '0';

					next_fsm_state_var:=S1;

				when S20 =>
					RF_WRITE_IN <= '0';
					MEM_WRITE_BAR_ENABLE<='1';
					ALU_B <= x"0001";
					ALU_A<=T5;
					ALU_CONTROL<="00";
					temp_T2:=ALU_O;

						next_fsm_state_var := S19;

				when others =>
					null;
				end case;

			T1 <= temp_T1; T2 <= temp_T2; T3 <= temp_T3; T4 <= temp_T4; T5 <= temp_T5;
			instr_reg <= instr_reg_var;
			C_FLAG <= TC_TEMP; Z_FLAG <= TZ_TEMP;
			--RF_WRITE_IN <= RF_WRITE_IN_var;
			--MEM_WRITE_BAR_ENABLE <= MEM_WRITE_BAR_ENABLE_var;

			if(rising_edge(clk)) then
				--T1 <= temp_T1; T2 <= temp_T2; T3 <= temp_T3; T4 <= temp_T4;
				--instr_reg <= instr_reg_var;
				if (rst = '1') then
					instr_pointer <= x"0000";
					fsm_state <= S0;
--					MEM_WRITE_BAR_ENABLE <= '1';
					--RF_WRITE_IN_var := '0';
					--MEM_WRITE_BAR_ENABLE <= '1';
					--RF_WRITE_IN <= '0';
					--T1 <= x"0000";
					--T2 <= x"0000";
					--T3 <= x"0000";
					--T4 <= x"0000";
					--instr_reg <= x"0000";
				else
					fsm_state <= next_fsm_state_var;
					instr_pointer <= next_IP;
					--instr_reg <= instr_reg_var;
					--T1 <= temp_T1; T2 <= temp_T2; T3 <= temp_T3; T4 <= temp_T4;
					--instr_reg <= instr_reg_var;
					--RF_WRITE_IN <= RF_WRITE_IN_var;
					--MEM_WRITE_BAR_ENABLE <= MEM_WRITE_BAR_ENABLE_var;
					
				end if;
			end if;

			--T1 <= temp_T1; T2 <= temp_T2; T3 <= temp_T3; T4 <= temp_T4;
			--instr_reg <= instr_reg_var;
			--RF_WRITE_IN <= RF_WRITE_IN_var;
			--MEM_WRITE_BAR_ENABLE <= MEM_WRITE_BAR_ENABLE_var;

			--RF_WRITE_IN <= RF_WRITE_IN_var;
			--MEM_WRITE_BAR_ENABLE <= MEM_WRITE_BAR_ENABLE_var;

		end process;


end main;